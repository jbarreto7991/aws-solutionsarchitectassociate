AWSTemplateFormatVersion: '2010-09-09'
Description: '1_lab13-vpc'

#Pre-requisitos

#Crear un "Key Pair"

Parameters:

  VPCCIDR:
     AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
     ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
     Default: 192.168.0.0/16
     Description: CIDR Block for the VPC
     Type: String
     
  SubnetCIDR1:
     AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
     ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
     Default: 192.168.1.0/24
     Description: CIDR Block for the Public Subnet (Load Balancer)
     Type: String
     
  SubnetCIDR2:
     AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
     ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
     Default: 192.168.2.0/24
     Description: CIDR Block for the Public Subnet (Load Balancer)
     Type: String
     
  SubnetCIDR3:
     AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
     ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
     Default: 192.168.3.0/24
     Description: CIDR Block for the Private Subnet (Backend)
     Type: String
     
  SubnetCIDR4:
     AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
     ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
     Default: 192.168.4.0/24
     Description: CIDR Block for the Private Subnet (Backend)
     Type: String

  SubnetCIDR5:
     AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
     ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
     Default: 192.168.5.0/24
     Description: CIDR Block for the Private Subnet (Database)
     Type: String
     
  SubnetCIDR6:
     AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
     ConstraintDescription: Must be a valid IP range in x.x.x.x/x notation
     Default: 192.168.6.0/24
     Description: CIDR Block for the Private Subnet (Database)
     Type: String

  InstancesFamily: 
     Description: The Instances Family
     Type: CommaDelimitedList
     Default: "t2.micro,t2.medium,t2.large,t2.xlarge"
    
  KeyPair: 
     Description: "Ingresar el nombre de un Key Pair"
     Type: AWS::EC2::KeyPair::KeyName


Mappings: 
#  KeyPair:
#    us-east-1: 
#      "key": "key-virginia"


  RegionAndNATInstanceToAMIID: 
    us-east-1: 
      "NATInstancesID": "ami-00a9d4a05375b2763"

  RegionAndAvailabilityZoneToSubnet: 
    us-east-1: 
      "AZa": "us-east-1a"
      "AZb": "us-east-1b"


Resources:

# Creacion del recurso VPC

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: 'PROD VPC'
      - Key: Enviroment
        Value: PROD
        
# Creacion del recurso Internet Gateway

  VpcInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: 'PROD IG'
      - Key: Enviroment
        Value: PROD
            
# Asociacion del recurso VPC e Internet Gateway
                  
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VpcInternetGateway
      VpcId: !Ref Vpc

# Creacion del recurso Subnet (Publicas y Privadas)

  VpcSubnetPublicAZa:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [RegionAndAvailabilityZoneToSubnet, !Ref "AWS::Region", AZa]
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCIDR1
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: 'PROD SUBNET PUBLIC AZ A'
      - Key: Enviroment
        Value: PROD

  VpcSubnetPublicAZb:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [RegionAndAvailabilityZoneToSubnet, !Ref "AWS::Region", AZb]
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCIDR2
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: 'PROD SUBNET PUBLIC AZ B'
      - Key: Enviroment
        Value: PROD

  VpcSubnetPrivateAZa:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [RegionAndAvailabilityZoneToSubnet, !Ref "AWS::Region", AZa]
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCIDR3
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: 'PROD SUBNET PRIVATE BACKEND AZ A'
      - Key: Enviroment
        Value: PROD

  VpcSubnetPrivateAZb:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [RegionAndAvailabilityZoneToSubnet, !Ref "AWS::Region", AZb]
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCIDR4
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: 'PROD SUBNET PRIVATE BACKEND AZ B'
      - Key: Enviroment
        Value: PROD

  VpcSubnetDatabaseAZa:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [RegionAndAvailabilityZoneToSubnet, !Ref "AWS::Region", AZa]
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCIDR5
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: 'PROD SUBNET PRIVATE DB AZ A'
      - Key: Enviroment
        Value: PROD

  VpcSubnetDatabaseAZb:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [RegionAndAvailabilityZoneToSubnet, !Ref "AWS::Region", AZb]
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCIDR6
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: 'PROD SUBNET PRIVATE DB AZ B'
      - Key: Enviroment
        Value: PROD

# Creacion del recurso Route Table

  VpcRouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: 'PROD RT PUBLIC'
      - Key: Enviroment
        Value: PROD

  VpcRouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: 'PROD RT PRIVATE'
      - Key: Enviroment
        Value: PROD
              
# Asociacion del recurso VPC Internet Gateway y Public Route Table

  VpcInternetRoutePublicAttachment:
    Type: AWS::EC2::Route
    DependsOn: VpcInternetGatewayAttachment
    Properties:
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref VpcInternetGateway
        RouteTableId: !Ref VpcRouteTablePublic

# Asociacion del recurso EC2 NAT Instances y Private Route Table
        
  VpcNatRoutePrivateAttachment:
    Type: AWS::EC2::Route
    Properties:
        DestinationCidrBlock: 0.0.0.0/0
        InstanceId: !Ref Ec2NATInstance
        #NatGatewayId: !Ref VpcNATGateway
        RouteTableId: !Ref VpcRouteTablePrivate

# Creaci√≥n del recurso EC2 NAT Instances

  Ec2NATInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Select [0, !Ref InstancesFamily]
      ImageId:  !FindInMap [RegionAndNATInstanceToAMIID, !Ref "AWS::Region", NATInstancesID]
      IamInstanceProfile: !Ref IAMServerProfile
      KeyName: !Ref KeyPair
      UserData:
        'Fn::Base64': 
          !Sub |
            #!/bin/bash
            cd /tmp
            sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            sudo systemctl enable amazon-ssm-agent
            sudo systemctl start amazon-ssm-agent
      SecurityGroupIds:
      - !Ref EC2SecurityGroupNATInstances
      SourceDestCheck: false
      SubnetId: !Ref VpcSubnetPublicAZb
      Tags:
      - Key: Name
        Value: 'PROD NAT Instances'     
      - Key: Enviroment
        Value: PROD

# Security Group NAT Instances

  EC2SecurityGroupNATInstances:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: 'Allow Internal Connection' 
        VpcId: !Ref Vpc
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          
# Asociacion del recurso Subnet y Route Table

  VpcSubnetPublicAZaRouteTableAttachment:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId: !Ref VpcRouteTablePublic
        SubnetId: !Ref VpcSubnetPublicAZa
  VpcSubnetPublicAZbRouteTableAttachment:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId: !Ref VpcRouteTablePublic
        SubnetId: !Ref VpcSubnetPublicAZb

  VpcSubnetPrivateAZaRouteTableAttachment:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId: !Ref VpcRouteTablePrivate
        SubnetId: !Ref VpcSubnetPrivateAZa
  VpcSubnetPrivateAZbRouteTableAttachment:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId: !Ref VpcRouteTablePrivate
        SubnetId: !Ref VpcSubnetPrivateAZb

  VpcSubnetPrivateDBAZaRouteTableAttachment:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId: !Ref VpcRouteTablePrivate
        SubnetId: !Ref VpcSubnetDatabaseAZa
  VpcSubnetPrivateDBAZbRouteTableAttachment:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId: !Ref VpcRouteTablePrivate
        SubnetId: !Ref VpcSubnetDatabaseAZb

#Creacion del recurso IAM Role

  IAMPolicySSM:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
        Path: /
        PolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                  Action: 
                  - 'ssm:ResumeSession'
                  - 'ssm:UpdateInstanceInformation'
                  - 'ssm:DescribeSessions'
                  - 'ssm:TerminateSession'
                  - 'ssm:StartSession'
                  Resource: '*'
                - Effect: Allow
                  Action: 
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel'
                  Resource: '*'
                - Effect: Allow
                  Action: 
                  - 'cloudwatch:PutMetricData'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:ListMetrics'
                  - 'ec2:DescribeTags'
                  Resource: '*'


  IAMPolicyAccessS3FromEC2:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
        Path: /
        PolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                  Action: 
                  - 's3:*'
                  Resource: '*'

  IAMPolicyAccessSecurityGroupFromEC2:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
        Path: /
        PolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                  Action: 
                  - 'ec2:*'
                  Resource: '*'


  IAMServerProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
        Path: /
        Roles:
            - !Ref IAMRoleEC2
                    
  IAMRoleEC2:
    Type: AWS::IAM::Role
    Properties:
        Path: "/"  
        AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                  Principal:
                    Service:
                    - ec2.amazonaws.com
                  Action:
                    - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Ref IAMPolicySSM
          - !Ref IAMPolicyAccessS3FromEC2
          - !Ref IAMPolicyAccessSecurityGroupFromEC2
        Tags: 
        - Key: Enviroment
          Value: PROD
          
Outputs: 

  Vpc: 
    Value: !Ref Vpc
    Export:
      Name: !Sub "Vpc"
  VpcSubnetPublicAZa: 
    Value: !Ref VpcSubnetPublicAZa
    Export:
      Name: !Sub "VpcSubnetPublicAZa"
  VpcSubnetPublicAZb: 
    Value: !Ref VpcSubnetPublicAZb
    Export:
      Name: !Sub "VpcSubnetPublicAZb"
  VpcSubnetPrivateAZa: 
    Value: !Ref VpcSubnetPrivateAZa
    Export:
      Name: !Sub "VpcSubnetPrivateAZa"
  VpcSubnetPrivateAZb: 
    Value: !Ref VpcSubnetPrivateAZb
    Export:
      Name: !Sub "VpcSubnetPrivateAZb"
  VpcSubnetDatabaseAZa: 
    Value: !Ref VpcSubnetDatabaseAZa
    Export:
      Name: !Sub "VpcSubnetDatabaseAZa"
  VpcSubnetDatabaseAZb: 
    Value: !Ref VpcSubnetDatabaseAZb
    Export:
      Name: !Sub "VpcSubnetDatabaseAZb"
  VpcCidrBlock:
    Value:
      Fn::GetAtt:
        - Vpc
        - CidrBlock
    Export:
      Name: VpcCidrBlock
  IAMServerProfile: 
    Value: !Ref IAMServerProfile
    Export:
      Name: !Sub "IAMServerProfile"