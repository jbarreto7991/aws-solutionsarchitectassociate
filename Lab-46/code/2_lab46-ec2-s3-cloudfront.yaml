AWSTemplateFormatVersion: '2010-09-09'
Description: '2_lab17-ec2.yaml'

#Se deberá crear un "Key Pair previamente"

Parameters:


  InstancesFamily: 
     Description: The Instances Family
     Type: CommaDelimitedList
     Default: "t2.micro,t2.medium,t2.large,t2.xlarge"
    
  KeyPair: 
     Description: "Ingresar el nombre de un Key Pair"
     Type: AWS::EC2::KeyPair::KeyName

Mappings: 

  RegionAndInstanceEC2TypeToAMIID: 
    us-east-1: 
      "HVM64": "ami-0729e439b6769d6ab"

  RegionAndAvailabilityZoneToSubnet: 
    us-east-1: 
      "AZa": "us-east-1a"
      "AZb": "us-east-1b"


Resources:

#Creacion del recurso IAM Role

  BackendIAMPolicySSM:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
        Path: /
        PolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                  Action: 
                  - 'ssm:ResumeSession'
                  - 'ssm:UpdateInstanceInformation'
                  - 'ssm:DescribeSessions'
                  - 'ssm:TerminateSession'
                  - 'ssm:StartSession'
                  Resource: '*'
                - Effect: Allow
                  Action: 
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel'
                  Resource: '*'
                - Effect: Allow
                  Action: 
                  - 'cloudwatch:PutMetricData'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:ListMetrics'
                  - 'ec2:DescribeTags'
                  Resource: '*'

  BackendIAMServerProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
        Path: /
        Roles:
            - !Ref BackendIAMRoleEC2
                    
  BackendIAMRoleEC2:
    Type: AWS::IAM::Role
    Properties:
        Path: "/"  
        AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                  Principal:
                    Service:
                    - ec2.amazonaws.com
                  Action:
                    - 'sts:AssumeRole'
        ManagedPolicyArns:
          - !Ref BackendIAMPolicySSM
          - arn:aws:iam::aws:policy/AmazonEC2FullAccess
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
        Tags: 
        - Key: Enviroment
          Value: PROD


#Creación Bucket S3

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      # Bucket names must be globally unique
      BucketName: !Sub 'aws-solutionsarchitectassociate-${AWS::AccountId}'
      AccessControl: Private
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: 'Allow'
            Principal:
              CanonicalUser: !GetAtt CfOriginAccessIdentity.S3CanonicalUserId
            Resource:
              - !Sub 'arn:aws:s3:::${S3Bucket}/*'

#Creación de la distribución CloudFront

  CfDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: 'A simple distribution with an S3 origin'
        DefaultCacheBehavior:
          AllowedMethods:
            - 'HEAD'
            - 'GET'
          CachedMethods:
            - 'HEAD'
            - 'GET'
          Compress: false
          DefaultTTL: 86400
          ForwardedValues:
            Cookies:
              Forward: 'none'
            Headers:
              - 'Origin'
            QueryString: false
          MaxTTL: 31536000
          MinTTL: 86400
          TargetOriginId: !Sub 's3-origin-${S3Bucket}'
          ViewerProtocolPolicy: 'allow-all'
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: 'http1.1'
        IPV6Enabled: false
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: !Sub 's3-origin-${S3Bucket}'
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CfOriginAccessIdentity}'
        PriceClass: 'PriceClass_All'

#Creación de OAI (Origin Access Identity)

  CfOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Metadata:
      Comment: 'Access S3 bucket content only through CloudFront'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Access S3 bucket content only through CloudFront'


#Creacion de la Instancia BACKEND

  Ec2Instance:
    Type: AWS::EC2::Instance
    DependsOn: 
     - EC2ApplicationLoadBalancer
     - S3Bucket
     - DBInstance
    Properties:
      InstanceType: !Select [ 0, !Ref InstancesFamily]
      ImageId: !FindInMap [RegionAndInstanceEC2TypeToAMIID, !Ref "AWS::Region", HVM64]
      IamInstanceProfile: !Ref BackendIAMServerProfile
      KeyName: !Ref KeyPair
      UserData:
        'Fn::Base64': 
          !Sub |
            #!/bin/bash
            
            sudo apt-get update
            sudo apt-get install awscli -y
            sudo apt-get install jq -y
            #aws --version

            #Descarga del proyecto e Instalación Nodejs
            cd /opt
            git clone https://github.com/jbarreto7991/aws-solutionsarchitectassociate.git
            curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
            sudo apt install nodejs -y
            #node --version
            #npm --version

            REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/\(.*\)[a-z]/\1/')

            #Identificando el dominio del ALB y almacenarla como variable
            DNS_ALB=$(aws elbv2 describe-load-balancers --region $REGION | jq -r '.LoadBalancers[] .DNSName')
            echo $DNS_ALB

            #Reemplazando parámetro en archivo de configuración de la carpeta frontend del proyecto
            sed 's+http://$PUBLIC_IP/v1+http://'"$DNS_ALB"'/v1+g' /opt/aws-solutionsarchitectassociate/App/frontend/src/config/axios.js >> /opt/aws-solutionsarchitectassociate/App/frontend/src/config/bk_axios.js
            rm /opt/aws-solutionsarchitectassociate/App/frontend/src/config/axios.js
            mv /opt/aws-solutionsarchitectassociate/App/frontend/src/config/bk_axios.js /opt/aws-solutionsarchitectassociate/App/frontend/src/config/axios.js
            cat /opt/aws-solutionsarchitectassociate/App/frontend/src/config/axios.js

            #Compilar Frontend e inicio del servicio
            cd /opt/aws-solutionsarchitectassociate/App/frontend
            npm install
            npm run build
            #sleep 10

            #Carga de archivos a S3
            cd /opt/aws-solutionsarchitectassociate/App/frontend/build/
            BUCKET=$(aws s3 ls | sort -r | awk 'NR ==1 { print $3 }')
            echo $BUCKET
            aws s3 sync . s3://$BUCKET
            
            #Instalación del Backend
            cd /opt/aws-solutionsarchitectassociate/App/backend/

            REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/\(.*\)[a-z]/\1/')

            #Identificando la IP Privada de la instancia "PROD DB" y almacenarla como variable
            DB_IP=$(aws ec2 describe-instances --filters "Name=tag:Type,Values=DB" --query 'Reservations[*].Instances[*].[PrivateIpAddress]' --region $REGION --output text)
            echo $DB_IP

            #Reemplazando parámetro en archivo de configuración de la carpeta backend del proyecto
            sed 's+DB_URI=127.0.0.1+DB_URI='"$DB_IP"'+g' /opt/aws-solutionsarchitectassociate/App/backend/.env >> /opt/aws-solutionsarchitectassociate/App/backend/bk_env
            rm /opt/aws-solutionsarchitectassociate/App/backend/.env
            mv /opt/aws-solutionsarchitectassociate/App/backend/bk_env /opt/aws-solutionsarchitectassociate/App/backend/.env
            cat /opt/aws-solutionsarchitectassociate/App/backend/.env

            #Inicio del servicio
            npm install
            npm start &

      SecurityGroupIds:
      - !Ref EC2SecurityWeb
      SourceDestCheck: true
      SubnetId: !ImportValue VpcSubnetPrivateAZa
      Tags:
      - Key: Name
        Value: 'PROD BACKEND'   
      - Key: Enviroment
        Value: PROD
      - Key: Type
        Value: WEB

  EC2SecurityWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: 'Allow Internal Connection' 
        VpcId: !ImportValue Vpc
        SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0


#Creacion de la Instancia DB

  DBInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Select [ 0, !Ref InstancesFamily]
      ImageId: !FindInMap [RegionAndInstanceEC2TypeToAMIID, !Ref "AWS::Region", HVM64]
      IamInstanceProfile: !Ref BackendIAMServerProfile
      KeyName: !Ref KeyPair
      UserData:
        'Fn::Base64': 
          !Sub |
            #!/bin/bash
            
            #Instalación Servidor MySQL
            sudo apt-get update
            sudo apt-get install mysql-server -y
            sudo service mysql status
            sed -i -e '43s/^/# /' /etc/mysql/mysql.conf.d/mysqld.cnf
            echo "bind-address            = 0.0.0.0" >> /etc/mysql/mysql.conf.d/mysqld.cnf
            sudo service mysql restart

            #Creación de usuario "admin"
            cat << EOF | mysql
            CREATE USER 'admin'@'%' IDENTIFIED BY 'admin'; 
            GRANT ALL PRIVILEGES ON * . * TO 'admin'@'%' IDENTIFIED BY 'admin';
            FLUSH PRIVILEGES;
            SELECT User, Host FROM mysql.user;
            quit
            EOF

            #Crear archivo que contiene usuario y contraseña de la base de datos
            touch /opt/mysql_access
            chmod 400 /opt/mysql_access
            echo "[client]" >> /opt/mysql_access
            echo "user=admin" >> /opt/mysql_access
            echo "password=admin" >> /opt/mysql_access

            #Crear de tabla "task" para la aplicación
            mysql --defaults-extra-file=/opt/mysql_access --batch << "EOF"
            create database test;
            use test;
            CREATE TABLE tasks
            (
                id MEDIUMINT NOT NULL AUTO_INCREMENT,
                `name` VARCHAR(255),
                description VARCHAR(255),
                PRIMARY KEY (id)
            );
            quit
            EOF
            ```
            sleep 5
            
      SecurityGroupIds:
      - !Ref EC2SecurityWeb
      SourceDestCheck: true
      SubnetId: !ImportValue VpcSubnetPrivateAZa
      Tags:
      - Key: Name
        Value: 'PROD DB'   
      - Key: Enviroment
        Value: PROD
      - Key: Type
        Value: DB




#Creacion del Recurso Application Load Balancer (ALB)

  EC2ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
        IpAddressType: ipv4
        Name: EC2ApplicationLoadBalancer
        Scheme: internet-facing
        SecurityGroups: 
          - !Ref EC2SecurityWeb
        Subnets: 
          - !ImportValue VpcSubnetPublicAZa
          - !ImportValue VpcSubnetPublicAZb
        Tags:
          - Key: Name
            Value: 'PROD ALB'
          - Key: Enviroment
            Value: PROD
        Type: application 


#Creacion del Recurso Listener HTTP

  EC2ALBListenerApp01:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:    
        - Type: forward
          TargetGroupArn: !Ref EC2LoadBalancerTargetGroupApp
      LoadBalancerArn: !Ref EC2ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

#Creacion del Recurso Target Group

  EC2LoadBalancerTargetGroupApp:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    #DependsOn: Ec2Instance
    Properties:
      Name: EC2LoadBalancerTargetGroupApp
      TargetType: instance
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: '/v1/api/tasks/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue Vpc
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 10
      Targets:
      - Id: !Ref Ec2Instance


Outputs: 

  BackendIAMServerProfile: 
    Value: !Ref "BackendIAMServerProfile"
    Export:
      Name: !Sub "BackendIAMServerProfile"
  Ec2Instance:
    Value: !Ref Ec2Instance
    Export:
      Name: !Sub "Ec2Instance"
  DBInstance:
    Value: !Ref DBInstance
    Export:
      Name: !Sub "DBInstance"
  EC2ApplicationLoadBalancer:
    Value: !Ref EC2ApplicationLoadBalancer
    Export:
      Name: !Sub "EC2ApplicationLoadBalancer"
  EC2SecurityWeb:
    Value: !Ref EC2SecurityWeb
    Export:
      Name: !Sub "EC2SecurityWeb"
  S3Bucket:
    Value: !Ref S3Bucket
    Export:
      Name: !Sub "S3Bucket"